# --- CR3 + Swift + Cylindrical overlay (kept your mesh debug) ---
from Cr3UR3editon import CR3                  # your robot class (DHRobot3D-based)
import swift
import numpy as np
import time
import os

# cylindrical link visuals
from ir_support import CylindricalDHRobotPlot

# ---------- Launch Swift ----------
env = swift.Swift()
env.launch(realtime=True)

# ---------- Build & add your mesh robot ----------
robot = CR3()
robot.add_to_env(env)

# ---------- Cylindrical overlay on top of the same kinematics ----------
# tune radius/color to taste
cyl = CylindricalDHRobotPlot(robot, cylinder_radius=0.03, color="#3478f6")
cyl_robot = cyl.create_cylinders()
cyl_robot.base = robot.base        # keep the same base pose
env.add(cyl_robot)

# ---------- (optional) mesh path debug you had ----------
print("Mesh dir:", robot._link3D_dir)
for k, name in robot.link3D_names.items():
    path = os.path.join(robot._link3D_dir, name + ".dae")  # change extension if needed
    try:
        size = os.path.getsize(path)
        print(k, os.path.basename(path), "size:", size)
    except OSError:
        print(k, os.path.basename(path), "MISSING")

# ---------- Real-time update loop ----------
# Keep stepping Swift and mirror the joint state to the cylinder overlay
try:
    while True:
        # keep the overlay in lockstep with the mesh robot
        cyl_robot.q = robot.q
        env.step(0.02)   # ~50 Hz updates (processes UI & renders)
except KeyboardInterrupt:
    print("\nClosing Swift environment...")
    env.close()
